%define CODE_JUMP 0x600
%define STACK_JUMP 0x200
%define CS_OFFSET 0x1

mov cx , ((end_Copy - start_Copy)/ 2)
mov bp, ax
lea si, [bp + start_Copy]
rep movsw

push ds 
push es
pop ds
pop es

mov bx , 0x50
mov al , 0xA3
mov [bx] , ax
mov word [bx + 2] , 0x01000 + CS_OFFSET

push cs
pop ss
mov sp, ax ;put sp in the right place

jmp start

start_Copy:
call far [bx]
rep movsw

start:
sub word [bx], CODE_JUMP
sub sp, STACK_JUMP

mov di, [bx]
add di, 0x10 * CS_OFFSET
mov cl, (end_Copy-start)/2
xor si,si
movsw
dec di
call far [bx]
nop

end_Copy: